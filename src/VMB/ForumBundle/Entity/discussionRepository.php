<?php

namespace VMB\ForumBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use VMB\UserBundle\Entity\User;
use VMB\PresentationBundle\Entity\Topic;

/**
 * discussionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class discussionRepository extends EntityRepository
{   
    public function getDiscussions($page, $nbPerPage, User $user)
	{
		$builder = $this->createQueryBuilder('d')
            ->where('d.user =:user')
                ->setParameter('user', $user)
			->orderBy('d.date', 'DESC');


		$query = $builder->getQuery();
		$query->setFirstResult(($page-1) * $nbPerPage)
			  ->setMaxResults($nbPerPage);

		return new Paginator($query, true);
	}
    
    public function getTopDiscussionsByTopic($nbPerPage, $page, Topic $topic)
	{
		$qb = $this->createQueryBuilder('d')
            ->select('d AS discussion,COUNT(c.id) AS nbComments')
            ->where('d.topic=:topic')
                ->setParameter('topic', $topic)
            ->leftJoin('d.comments','c')
            ->groupby ('d.id')
            ->orderBy('nbComments', 'DESC');
            
        $query = $qb->getQuery();
        $query->setFirstResult(($page-1) * $nbPerPage)
			   ->setMaxResults($nbPerPage);
              
		return  new Paginator($query, true);
	}
    
    public function getTopDiscussions($nbPerPage, $page)
	{
		$qb = $this->createQueryBuilder('d')
            ->select('d AS discussion,COUNT(c.id) AS nbComments')
            ->leftJoin('d.comments','c')
            ->groupby ('d.id')
            ->orderBy('nbComments', 'DESC');
            
        $query = $qb->getQuery();
        $query->setFirstResult(($page-1) * $nbPerPage)
			   ->setMaxResults($nbPerPage);
              
		return  new Paginator($query, true);
	}
    
        public function whereCurrentMonth(QueryBuilder $qb)
        {   
		$qb->andWhere('d.date BETWEEN :start and :end')
           ->setParameter('start', new \Datetime(date('Y-m').'-01'))  // Date entre le 1er janvier de cette année
           ->setParameter('end',   new \Datetime(date('Y-m').'-31'))  // Et le 31 décembre de cette année
        ;

	}
    
    public function getDiscussionsByTopic(Topic $topic)
	{
		$builder = $this->createQueryBuilder('d')
            ->where('d.topic =:topic')
                ->setParameter('topic', $topic)
			->orderBy('d.date', 'DESC');


		$query = $builder->getQuery();
		$query->setFirstResult(($page-1) * $nbPerPage)
			  ->setMaxResults($nbPerPage);

		return new Paginator($query, true);
	}
    
     public function getNbDiscussions()
	{   
        
		$builder = $this->createQueryBuilder('d')
            ->select('COUNT(d.id) AS nbDiscussions')
            ->groupBy('d.topic')
            ->orderBy('d.topic','ASC');

		$query = $builder->getQuery();

		return $query->getResult();
	}
    
    public function searchWithQuery($query)
	{
		$builder = $this->createQueryBuilder('d')
					  ->orderBy('d.date', 'DESC');

		if($query !== null) {
			$builder->andWhere('d.title LIKE :q OR d.description LIKE :q')->setParameter('q', '%'.$query.'%');
		}


		return $builder->getQuery()->getResult();
	}
}
