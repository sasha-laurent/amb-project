<?php

namespace VMB\ResourceBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ResourceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResourceRepository extends EntityRepository
{

	public function findAllByDate()
	{
		return $this->findBy(array(),array('dateCreate' => 'DESC'));
	}

	public function getResources($page, $nbPerPage, $topic=null, $official=true, $user = null, $search = null, $idArray = null)
	{
		$builder = $this->createQueryBuilder('r')
			->orderBy('r.dateUpdate', 'DESC');
		
		if($topic != null) {
			$builder->join('r.topic', 't')
			->andWhere('t.lft >= :topicLft')->setParameter('topicLft', $topic->getLft())
			->andWhere('t.rgt <= :topicRgt')->setParameter('topicRgt', $topic->getRgt())
			->andWhere('t.root = :topicRoot')->setParameter('topicRoot', $topic->getRoot());
		}
		
		if(is_bool($official)) {
			$builder->andWhere('r.trusted = :official')
			->setParameter('official', $official);
		}
		
		if($user != null) {
			$builder->andWhere('r.owner = :user')->setParameter('user', $user);
		}
		
		if($search != null) {
			$builder->andWhere('r.title LIKE :keyword OR r.keywords LIKE :keyword OR r.description LIKE :keyword')->setParameter('keyword', '%'.$search.'%');
		}
		
		if($idArray != null) {
			$builder->andWhere('r.id IN (:idArray)')
			->setParameter('idArray', $idArray);	
		}

		$query = $builder->getQuery();
		$query->setFirstResult(($page-1) * $nbPerPage)
			  ->setMaxResults($nbPerPage);

		return new Paginator($query, true);
	}
	
	public function getTopicResources($topic, $official=true, $user=null, $search=null)
	{
		$builder = $this->createQueryBuilder('r')
			->orderBy('r.type');
		
		$builder->join('r.topic', 't')
		->andWhere('t.id = :topic')->setParameter('topic', $topic->getId());
	
		if(is_bool($official)) {
			$builder->andWhere('r.trusted = :official')
			->setParameter('official', $official);
		}
		
		if($user != null) {
			$builder->andWhere('r.owner = :user')->setParameter('user', $user);
		}
		
		if($search != null) {
			$builder->andWhere('r.title LIKE :keyword OR r.keywords LIKE :keyword OR r.description LIKE :keyword')->setParameter('keyword', '%'.$search.'%');
		}

		return $builder
		->getQuery()
		->getResult();
	}
	
	
	public function findByTopicSortedByType($topic, $official =  true, $user = null, $exclusive = false)
	{
		$qb = $this
			->createQueryBuilder('r')
			->orderBy('r.type')
			->join('r.topic', 't')
			->andWhere('t.lft >= :topicLft')->setParameter('topicLft', $topic->getLft())
			->andWhere('t.rgt <= :topicRgt')->setParameter('topicRgt', $topic->getRgt())
			->andWhere('t.root = :topicRoot')->setParameter('topicRoot', $topic->getRoot())
		;
		
		if($official !== null) {
			$qb->andWhere('r.trusted = :official')->setParameter('official', $official);
		}
		
		if($user != null) {
			if($exclusive) {
				$qb->andWhere('r.owner <> :user')->setParameter('user', $user);
			}
			else {
				$qb->andWhere('r.owner = :user')->setParameter('user', $user);
			}
		}
		return $qb
		->getQuery()
		->getResult();
	}
	
	public function findByKeyword($keyword, $topicId = null)
	{
		$qb = $this
			->createQueryBuilder('r')
			->orderBy('r.type')
		;
		$qb->where('r.title LIKE :keyword')->setParameter('keyword', '%'.$keyword.'%');
		
		if($topicId !== null) {
			$qb->innerJoin('r.topic', 't')
			->where('t.topic = :topic')->andWhere('IDENTITY(t.id) = :topicId')->setParameter('topicId', $topicId);
		}

		return $qb
		->getQuery()
		->getResult();
	}

	public function searchWithQuery($query, $user)
	{
		$builder = $this->createQueryBuilder('r')
					  ->orderBy('r.dateUpdate', 'DESC');

		if($query !== null) {
			$builder->andWhere('r.title LIKE :q OR r.keywords LIKE :q')->setParameter('q', '%'.$query.'%');
		}
		// Mine or Mine & Public
		if($user !== null) {
			$builder->andWhere('r.owner = :user')->setParameter('user', $user);
		} else {
			$builder->andWhere('r.owner=NULL');
		}

		return $builder->getQuery()->getResult();
	}
        
        public function getVisibleResourcesCounts($topic,$user)
	{
		$count = 0;
		$query_res = 0;
		if($topic != null)
		{
			try{ // Calculate ressources count
				$presentation_repo = $this->getEntityManager()->getRepository('VMBResourceBundle:Resource');
				$qb = $presentation_repo->createQueryBuilder('r')->select('count(r.id)')
                                ->innerJoin('r.topic', 'tr')
                                ->where('tr.id=:trId')->setParameter('trId', $topic);
                                //->andWhere('r.owner = :user')->setParameter('user', $user);
				$query_res = $qb->getQuery()->getSingleScalarResult();	
				$count += $query_res;

			} catch (\Doctrine\ORM\NonUniqueResultException $e)
			{
				echo $e;
			}

            // Calculate topic's children presentations count
			$children = $topic->getChildren();
            foreach($children as $c){
            	$query_res = $this->getVisibleResourcesCounts($c,$user);
            	$count += $query_res;
       		}
    	}
    	// Return total presentations count
		return $count;
	}
        
    public function getNumberResources(){
        $count = 0;
        $query_res = 0;
        try{
            $presentation_repo = $this->getEntityManager()->getRepository('VMBResourceBundle:Resource');
            $qb = $presentation_repo->createQueryBuilder('r')->select('count(r.id)');
            $query_res = $qb->getQuery()->getSingleScalarResult();	
            $count += $query_res;
            
        } catch (Exception $ex) {
            echo $ex;
        }
        return $count;
    }
}
