{% set editModal = '.bs-example-modal-lg' %}
{% set saveButton = 'true' %}
{% extends '::Backend/subPage.html.twig' %}

{% set lvlLength = entity.levels|length %}
{% if lvlLength == 0 %}
	{% set lvlLength = 1 %}
{% endif %}	

{% set cellWidth = (830 / lvlLength) %}
	{% if cellWidth > 120 %}
		{% set cellWidth = 120 %}
	{% endif %}
	{% set cellHeight = cellWidth * 9 / 16 %}

{% block body %}
	<div class="drag_container">
		<form id="matrix_form" action="{{ path('matrix_update', {'id': entity.id})}}" method="post">
		<table style="width:{{ cellWidth*entity.levels|length + 120}}px;" id="matrix" class="table table-bordered">
			<tr class="compact_tr">
				<th width="120px"></th>
				{% for level in entity.levels %}
				<th width="{{ cellWidth }}px" class="text-center">{{ level.title }}</th>
				{% endfor %}
			</tr>
			{% for pov in entity.povs %}
			<tr height="{{ cellHeight }}px">
				<th class="text-center">{{ pov.title }}</th>
				{% for level in entity.levels %}
					<td id="td_{{ pov.id ~ "_" ~ level.id }}" data-prototype="{{ pov.id ~ "_" ~ level.id }}" class="text-center"></td>
				{% endfor %}
			</tr>
			{% endfor %}
		</table>
		<div id="inputs_hidden"></div>
	</form>
	<hr/>
		<div class="row">
			<div class="col-sm-7">
				<h4><span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span> {{ 'browse.preview_current_resource'|trans }}</h4>
				{% include '::players.html.twig' %}
			</div>
			<div class="col-sm-5">
				<h4><span class="glyphicon glyphicon-open" aria-hidden="true"></span>  {{ 'resource.browse'|trans }}{% if entity.official %} {{ 'resource.officials'|trans }}{% endif %}</h4>
				<div id="browse_file" role="tab-panel">
					<ul class="nav nav-tabs" role="tablist">
						<li role="presentation" class="active"><a href="#personal" aria-controls="personal" role="tab" data-toggle="tab">{{ 'resource.personals'|trans }}</a></li>
						<li role="presentation"><a href="#official" aria-controls="official" role="tab" data-toggle="tab">{{ 'resource.officials'|trans }}</a></li>
						<li role="presentation"><a href="#bookmarks" aria-controls="bookmarks" role="tab" data-toggle="tab">{{ 'resource.bookmarks'|trans }}</a></li>
						{% if not entity.official %}<li role="presentation"><a href="#unofficial" aria-controls="unoffficial" role="tab" data-toggle="tab">{{ 'resource.shared'|trans }}</a></li>{% endif %}
						<li role="presentation"> 
						{# Modal resource add reference html here, with minimal modal form beneath.AJAX request with success means it becomes available immediately, upload in progress could feature a progress bar (@Future), failure means fail gracefully with an error message and let the user keep on working. #}
						<a title="{{"resource.add"|trans}}" data-toggle="modal" data-target="#modalResourceAdd"><span class="glyphicon glyphicon-plus"></span></a>
						</li>
					</ul>
					<div class="tab-content">
                                            <h1>test</h1>
						{% for key, subArrResources in resources %}
						<div role="tabpanel" class="tab-pane{% if key == 'personal' %} active{% endif %}" id="{{ key }}">
							<div class="panel-group" role="tablist">
								<div class="panel panel-default">
									{% if subArrResources|length == 0 %}
										<div style="" aria-expanded="true" class="panel-collapse">
											<ul class="list-group">
												<li class="list-group-item">
													<em>{{ 'resource.none_found_in_this_space'|trans }}
													{% if entity.official %}<br/>{{ 'matrix.note_resource'|trans }}{% endif %}</em>
												</li>
											</ul>
										</div>
									{% else %}
										{% set lastType = '' %}
										{% for elt in subArrResources %}
											{% if lastType != elt.type %}
												{% if lastType != '' %}
														</ul>
													</div>
												{% endif %}
												{% set lastType = elt.type %}
												<div class="panel-heading" role="tab" id="collapseListGroupHeading_{{ key }}_{{ elt.type }}">
													<h4 id="-collapsible-list-group-{{ key }}-{{ elt.type }}" class="panel-title">
													<a class="panel-title-link" data-toggle="collapse" href="#collapseListGroup_{{ key }}_{{ elt.type }}" aria-expanded="true" aria-controls="collapseListGroup_{{ key }}_{{ elt.type }}">
														<span class="glyphicon glyphicon-{{ elt.getGlyphicon }}"></span> {{ elt.getTypeTitle }}
													</a>
													<a class="anchorjs-link" href="#-collapsible-list-group-{{ key }}-{{ elt.type }}"><span class="anchorjs-icon"></span></a></h4>
												</div>
												<div style="" aria-expanded="false" id="collapseListGroup_{{ key }}_{{ elt.type }}" class="panel-collapse collapse" role="tabpanel" aria-labelledby="collapseListGroupHeading_{{ key }}_{{ elt.type }}">
													<ul class="list-group">
											{% endif %}
														<li class="list-group-item addableResource addableRes_{{elt.id}}" data-resource="{{ elt.id }}" data-title="{{ elt.title|shortenText(18, '...') }}" data-thumb="{{ asset(elt.getThumbsPath) }}">
															<div class="row">
																<div class="col-sm-10">{{ elt.title }}</div>
																<div class="col-sm-2">{% if elt.duration > 0 %}{{ elt.durationToString }}{% endif %}</div>
															</div>
														</li>
										{% endfor %}
													</ul>
												</div>
									{% endif %}												
								</div><!-- panel panel-default -->
							</div><!-- panel-group -->
						</div><!-- tab-pane -->
						{% endfor %}
					</div><!-- tab-content -->
				</div>
			</div>
		</div>
	</div>

	<div class="row">
		<div class="col-md-8">
			<h4 class="view-more-title"><a data-toggle="collapse" href="#collapseDescription" aria-expanded="false" aria-controls="collapseDescription">DÃ©tails de la matrice <span class="glyphicon glyphicon-chevron-right"></span></a></h4>
			<div class="collapse" id="collapseDescription">
			<strong>{{ 'table.creation'|trans }} {{ entity.dateCreation|date('d/m/y') }}</strong>
			{% if entity.dateCreation != entity.dateUpdate %}  ({{ 'table.update'|trans }} : {{ entity.dateUpdate|date('d/m/y') }}){% endif %}
			<p>{{ entity.description }} </p>
			</div>
		</div>
	</div>

	<div id="indicator" class="loading_indicator"></div>

	<!-- Modal -->

	<div id="modalResourceAdd" class="modal fade bs-example-modal" tabindex="-1" role="dialog" aria-labelledby="modalResourceAdd">
	  <div class="modal-dialog" role="document">
		<div class="modal-content container-fluid">
		</div>
	  </div>
	</div>	

	<div id="myModal" class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
	  <div class="modal-dialog modal-lg">
		<div class="modal-content container">
		</div>
	  </div>
	</div>
{% endblock %}

{% block script %}
	{{ parent() }}
	<script>
	var places = ["bottom", "left", "top", "right"];
	var rowsUpdated = false;
	
	function indexOf(array, item) {
		for (var i = 0; i < array.length; i++) {
			if (array[i].toString() === item.toString()) return i;
		}
		return -1;
	}
	
	resourcesCollection = {
		{% for key, subArrResources in resources %}
			{% for elt in subArrResources %}
				{{ elt.id }}: {
					'title': "{{ elt.title|escape('js') }}", 
					'shortTitle': "{{ elt.title|shortenText(18, '...')|escape('js') }}", 
					'description': "{{ elt.description|escape('js') }}", 
					'creation': "{{ elt.dateCreate|date('d/m/y') }}", 
					'update': "{{ elt.dateUpdate|date('d/m/y') }}", 
					'duration': {{ elt.duration|default(0) }},
					'duration_str': "{{ "%02d"|format(elt.duration // 60) }}:{{ "%02d"|format(elt.duration % 60) }}",
					'src': "{{ asset(elt.getResourcePath) }}",
					'type': "{{ elt.type|escape('js') }}",
					'thumbs': "{{ asset(elt.getThumbsPath) }}",
				},
			{% endfor %}
		{% endfor %}
	};
	selectedRes = 0;
	$(document.querySelectorAll(".player")[0]).show();
	
	{% include '::plyrSetup.html.twig' %}
		
	var selectedClass = 'ui-state-highlight',
		clickDelay = 250,
		// click time (milliseconds)
		lastClick, diffClick; // timestamps
		
	function triggerNewRes(resId) {
		if(selectedRes != resId) {
			$('.addableRes_' + selectedRes).removeClass('active');
			selectedRes = resId;
			res = resourcesCollection[resId];
			stopAndHideAll(res['type']);
			$('.addableRes_' + resId).addClass('active');
			
			displayNewRes(res['src'], res['type']);
		}
	}
	
	$('.addableResource').click(function() {
		triggerNewRes($(this).attr('data-resource'));
	});
	
	// Matrix object
	function Matrix() {
		this.unsaved = false;		
		this.boxes = {};
		this.mode = 'tile'; // tile or resource
		
		this.getBox = function(coords) { return this.boxes[coords]; };
	};
	
	Matrix.prototype.setMode = function(mode) { 
		var currentMode = this.mode;
		
		if((mode == 'tile' || mode == 'resource') && mode != currentMode) { 
			this.mode = mode; 
			if(mode == 'tile') {
				$('.usedResource.' + selectedClass).removeClass(selectedClass);
			}
			else {
				$('.tileUsedResource.' + selectedClass).removeClass(selectedClass);
			}
		} 
	}
	
	Matrix.prototype.addBox = function(pov, lvl, resList) {
		this.boxes[pov + "_" + lvl] = new Box(pov, lvl, resList);
		this.boxes[pov + "_" + lvl].generateBox();
	};
	
	Matrix.prototype.generatePopover = function(boxId) {
		return this.boxes[boxId].generatePopover();
	};
	
	// Method that sets the matrix as unsaved
	Matrix.prototype.noticeUnsaved = function() {
		this.unsaved = true;
		$("#save-btn").addClass('btn-info');
		$("#save-btn").removeClass('btn-default');
	};
	
	Matrix.prototype.prepareSave = function() {
		inputs = "";
		$.each(this.boxes, function(key, box) {
			inputs += box.generateInputs();
		});	
		$('#inputs_hidden').html(inputs);
	};
	
	Matrix.prototype.transfer = function(source, destination) {
		if(source != destination) {
			this.boxes[source].transferTo(this.boxes[destination]);
		}
	}
	
	Matrix.prototype.deleteSelection = function() {
		if(this.mode == 'tile') {
			$('.tileUsedResource.' + selectedClass).each(function(i, obj) {
				this.getBox($(obj).attr('data-coordinates')).clearResources();
			}.bind(this));
			$('.tileUsedResource.' + selectedClass).removeClass(selectedClass);
		}
		else {
			var idArray = $('.usedResource.' + selectedClass).map(function(){
				return $(this).attr('data-id');
			}).get();
			this.getBox($('.usedResource.' + selectedClass).closest('td').attr('data-prototype')).removeResource(idArray);
			$('.usedResource.' + selectedClass).removeClass(selectedClass);
		}
	}
	
	// Box (td) object
	function Box(pov, lvl, resList) {
		this.pov = pov;
		this.lvl = lvl;
		this.resList = resList;
		this.domElt = $('#td_' + this.pov + '_' + this.lvl);
	};
	
	Box.prototype.generateBox = function() {
		var str = '<div class="tileUsedResource" data-coordinates="' + this.pov + '_' + this.lvl + '" data-length="' + this.resList.length + '" data-toggle="popover" ';
		if(this.resList.length > 0) {
			str += 'style="' + this.resList[0].getBackgroundStyle() + ' height:100%; display:inline-block; "><div class="nbResources"><div class="total">' + this.resList.length + '</div></div>';
		}
		else {
			str += 'style="background-image: none;"><div class="nbResources noBg"></div>';
		}
		str += '</div>';
		
		this.domElt.html(str);
	};
	
	Box.prototype.updateBox = function() {
		var elt = $('> .tileUsedResource', this.domElt);
		elt.attr('data-length', this.resList.length);
		if(this.resList.length > 0) {
			$(elt).css('background-image', 'url(' + this.resList[0].getThumbs() + ')');
			$('> .nbResources', elt).removeClass('noBg');
			$('> .nbResources', elt).html('<div class="total">' + this.resList.length + '</div>');
			if($('.tileUsedResource', this.domElt).data("bs.popover").tip().hasClass('in')) {
				$('.tileUsedResource', this.domElt).popover('show');
			}
		}
		else {
			$(elt).css('background-image', 'none');
			$('> .nbResources', elt).addClass('noBg');
			$('> .nbResources', elt).html('');
			if($('.tileUsedResource', this.domElt).data("bs.popover").tip().hasClass('in')) {
				$('.tileUsedResource', this.domElt).popover('hide');
			}
		}
		
		
	}
	
	Box.prototype.transferTo = function(destination) {
		for(var i = 0; i < this.resList.length; i++) {
			destination.addResource(this.resList[i].getId());
		}
		this.clearResources();
	}
	
	Box.prototype.generatePopover = function() {
		var str = '';
		for(i=0; i < this.resList.length; i++) {
			str += this.resList[i].getPopoverContent();
		}
		if(str != '') {
			str = '<div class="sortableResources">' + str + '</div>';
			str += (this.resList.length > 1) ? '<a class="enableSort">Activer le classement</a>' : '<a class="enableSort hidden">Activer le classement</a>';
		}		
		return str;
	};
	
	Box.prototype.addResource = function(resId) {
		this.resList.push(new Resource(resId));
		this.updateBox();
	};
	
	Box.prototype.clearResources = function() {
		this.resList.splice(0, this.resList.length);
		this.updateBox();
	}
		
	Box.prototype.removeResource = function(resId) {
		resId = (resId.constructor === Array) ? resId : [ resId ];
		
		for(j=0; j < resId.length; j++) {
			for(var i = this.resList.length - 1; i >= 0; i--) {
				if(this.resList[i].getId() == resId[j]) {
					this.resList.splice(i, 1);
				}
			}
		}
		this.updateBox();
	};
	
	Box.prototype.generateInputs = function() {
		var output = "";
		for(var i = 0; i < this.resList.length; i++) {
			output += '<input type="hidden" name="' + this.pov + '_' + this.lvl + '_' + i + '" value="' + this.resList[i].getId() + '" />';
		}
		return output;
	}
	
	Box.prototype.updateResourceList = function(newResList) {
		if(newResList.length == this.resList.length) {
			for(var i = 0; i < this.resList.length; i++) {
				this.resList[i].setId(newResList[i]);
			}
		}
	}
	
	// Used Resource Object
	function Resource(resId) {
		this.id = resId;

		this.setId				= function(newId) { this.id = newId; }
		this.getId				= function() { return this.id; };
		this.getThumbs 			= function() { return (this.id != 0) ? resourcesCollection[this.id].thumbs 			 	  : ''; };
		this.getShortTitle 		= function() { return (this.id != 0) ? resourcesCollection[this.id].shortTitle 		 	  : ''; };
		this.getBackgroundStyle = function() { return (this.id != 0) ? 'background-image: url(' + this.getThumbs() + ');' : 'background-image: none;'; };
	};
	
	Resource.prototype.getPopoverContent = function() {
		return '<div class="usedResource" data-id="' + this.getId() + '" style="background-image:url(' + this.getThumbs() + ');"> \
			<div class="resThumbnailHover"><span class="resTitle">' + this.getShortTitle() + '</span></div> \
		</div>';
	};
	
	// BINDINGS
	function enableResourceDrop() {
		$('#matrix td').droppable("option", "accept", '.tileUsedResource, .addableResource, .usedResource');
	}
	
	function disableResourceDrop() {
		$('#matrix td').droppable("option", "accept", '.tileUsedResource, .addableResource');
	}
	
	function bindPopover(selector) {
		$(selector).popover({
			html: true,
			placement: "bottom",
			trigger: "click",
			content: function() { return matrix.generatePopover($(this).attr('data-coordinates')); }
		}).on("show.bs.popover", function () { 
			$('.tileUsedResource').not(this).popover('hide');
			elt = $('> .popover-content', $(this).data("bs.popover").tip());
			elt.css("height", ((parseInt($(this).attr('data-length'), 10) > 1) ? 1 : 0) * 16 + 67 + 12 * 2 + 'px'); 
			elt.css("width", ($(this).attr('data-length') * 120 + ($(this).attr('data-length') - 1) * 4 + 12*2) + "px"); 
		}).on('hidden.bs.popover', function () {
			$(this).removeClass('activeTile');
		}).on('shown.bs.popover', function () {
			$(this).addClass('activeTile');
			$(this).attr('data-sortableEnabled', 0);
			
			// Draggable behaviour
			bindCustomDraggable($('> .popover-content .usedResource', $(this).data("bs.popover").tip()), 10, '#' + $(this).data("bs.popover").tip().attr("id") + ' .sortableResources');
			
			// Sortable behaviour
			$('> .popover-content .enableSort', $(this).data("bs.popover").tip()).unbind('click');
			$('> .popover-content .enableSort', $(this).data("bs.popover").tip()).on('click', function() {
				var elt = $('> .popover-content', $(this).data("bs.popover").tip());
				if($(this).attr('data-sortableEnabled') == 1) {
					$(this).attr('data-sortableEnabled', 0);
					$('> .sortableResources', elt).sortable('destroy');
					enableResourceDrop();
					$(elt).find('.enableSort').html("Activer le classement");
				}
				else {
					$(this).attr('data-sortableEnabled', 1);
					disableResourceDrop();
					$('> .sortableResources', elt).sortable({ 
						update: function(event, ui) { 
							var newResList = []
							$('> .usedResource', this).each(function() { newResList.push($(this).attr('data-id')); });
							matrix.getBox($(this).closest('td').attr('data-prototype')).updateResourceList(newResList);
						}
					});
					$(elt).find('.enableSort').html("DÃ©sactiver le classement");
				}
			}.bind(this));
			
			// Right click behaviour
			$('> .popover-content', $(this).data("bs.popover").tip()).unbind('contextmenu');
			$('> .popover-content', $(this).data("bs.popover").tip()).on('contextmenu', function(event) {
				// on right click : modify popover position (clockwise)
				$(this).data("bs.popover").options.placement = places[(indexOf(places, $(this).data("bs.popover").options.placement) + 1) % 4];
				$(this).popover('show');
				return false;
			}.bind(this));
		});
		
		$(selector).on('contextmenu', function(event) {
			// on right click : modify popover position (clockwise)
			$(this).data("bs.popover").options.placement = places[(indexOf(places, $(this).data("bs.popover").options.placement) + 1) % 4];
			$(this).popover('show');
			return false;
		});
	}
	
	function bindCustomDraggable(selector, revertTime, connectToSortableId) {
		revertTime = typeof revertTime !== 'undefined' ? revertTime : 0;
		connectToSortableId = typeof connectToSortableId !== 'undefined' ? connectToSortableId : false;
		
		$(selector).unbind('mousedown mouseup');	
		$(selector).bind('mousedown mouseup', function(e) {
			if (e.type == "mousedown") {
				lastClick = e.timeStamp; // get mousedown time
			} else {
				diffClick = e.timeStamp - lastClick;
				if (diffClick < clickDelay) {
					// add selected class to group draggable objects if Ctrl is pressed
					if($(this).hasClass('tileUsedResource')) {
						if (e.ctrlKey && $(this).find('input').first().val() != 0) {
							matrix.setMode('tile');
							$(this).toggleClass(selectedClass);
						}
					}
					else if($(this).hasClass('usedResource')) {
						if (e.ctrlKey) {
							matrix.setMode('resource');
							$(this).toggleClass(selectedClass);
						}
					}
				}
			}
		})
		.draggable({
			revertDuration: revertTime,
			containment: '.drag_container',
			connectToSortable: connectToSortableId,
			zIndex: 1000,
			revert: true,
			cursor: "move", 
			cursorAt: { top: {{ cellHeight / 2 }}, left: {{ cellWidth / 2 }} },
			start: function(e, ui) {
				ui.helper.addClass(selectedClass);
			},
			stop: function(e, ui) {
				// reset group positions
				$('.' + selectedClass).css({
					top: 0,
					left: 0
				});
				ui.helper.removeClass(selectedClass);
			},
			drag: function(e, ui) {
				// set selected group position to main dragged object
				// this works because the position is relative to the starting position
				$('.' + selectedClass).css({
					top: ui.position.top,
					left: ui.position.left
				});
				$('.' + selectedClass).popover('hide');
			}
		});
	}
	
	function noticeUnsavedMatrix() {		
		matrix.noticeUnsaved();
	}
	
	matrix = new Matrix();
	
	$(function() {		
		{% for pov in entity.povs %}
			{% for level in entity.levels %}
				matrix.addBox({{ pov.id }}, {{ level.id }}, [
				{% if entity.sortedResources[pov.id][level.id] is defined %}
					{% for usedRes in entity.sortedResources[pov.id][level.id] %}
							new Resource({{ usedRes.resource.id }}),
					{% endfor %}
				{% endif %}
				]);
			{% endfor %}
		{% endfor %}
		
		bindCustomDraggable($(".tileUsedResource"));
		bindPopover('.tileUsedResource');
		// Script to differentiate a click from a mousedown for drag event		
		
		$('.addableResource').draggable({
			zIndex: 1000,
			cursor: "move",
			revert: true,
			helper: "clone"
		});

		$("#browse_file").droppable({
			accept: '.tileUsedResource, .usedResource',
			drop: function(e, ui) {
				matrix.deleteSelection();
				noticeUnsavedMatrix();
			}
		});
		
		$("#matrix td").droppable({
			accept: '.tileUsedResource, .addableResource, .usedResource',
			drop: function(e, ui) {
				if(ui.draggable.hasClass('tileUsedResource')) {
					if($('.tileUsedResource.'+ selectedClass).length > 1) {
						alert('Vous ne pouvez pas dÃ©placer plusieurs Ã©lÃ©ments dans une seule case');
					}
					else {
						ui.draggable.removeClass(selectedClass).css({
							top: 0,
							left: 0
						});
						matrix.transfer(ui.draggable.attr('data-coordinates'), $(this).attr('data-prototype'));
					}
				}
				else if(ui.draggable.hasClass('addableResource')) {
					matrix.getBox($(this).attr('data-prototype')).addResource(ui.draggable.attr('data-resource'));
				}
				else if(ui.draggable.hasClass('usedResource')) {		
					var idArray = $('.usedResource.' + selectedClass).map(function(){
						return $(this).attr('data-id');
					}).get();
					matrix.getBox($('.usedResource.' + selectedClass).closest('td').attr('data-prototype')).removeResource(idArray);
					for(var i=0; i < idArray.length; i++) {
						matrix.getBox($(this).attr('data-prototype')).addResource(idArray[i]);
					}
				}
				noticeUnsavedMatrix();
				$(this).removeClass('tdOvered');
			},
			over: function(e, ui) {
				$(this).addClass('tdOvered');
			},
			out: function(e, ui) {
				$(this).removeClass('tdOvered');
			}
		});
	});

	// For forward compatibility we call jQuery.load() and inject content in the modal container 
	// instead of using "remote" parameter in the modal.js
	$('#myModal').on('show.bs.modal', function (e) {
		$('#indicator').show();
		var modal_content = $(this).find(".modal-dialog > .modal-content");
		$(modal_content).load("{{ path('matrix_edit', {'id': entity.id, 'is_modal': true}) }}", function(){
			$('#indicator').hide();
		});		
	});

	$('#modalResourceAdd').modal({ show: false });
	$('#modalResourceAdd').on('show.bs.modal', function(e){
		$('#indicator').show();
		var modal_content = $(this).find(".modal-dialog > .modal-content");
		$(modal_content).load("{{ path('resource_new', {'is_modal':true}) }}", function(){
			$('#indicator').hide();
		});		
	});
	// on hide, if resource upload is pending then show a small tab on the bottom right
	$('#modalResourceAdd').on('hide.bs.modal', function(e){
	});


	$('#save-btn').click(function(event) {
		matrix.prepareSave();
		$(".loading_indicator_inline").css('display', 'inline-block');
		event.preventDefault();
		$('#matrix_form').submit();
	});
	
	$('html').keyup(function(e){
		if(e.key == 'Delete') {
			matrix.deleteSelection();
			noticeUnsavedMatrix();
		}
		else if(e.keyCode == 17) {
			// Ctrl released
			$('.tileUsedResource').popover('enable');
		}
	});
	
	$('html').keydown(function(e){
		if(e.ctrlKey) {
			// Ctrl pressed
			$('.tileUsedResource').popover('disable');
		}
	});
	
	
	// Matrix rows management
	function updateTitle(item, id, type, title) {
		$.ajax({
			type: "POST",
			url: "{{ path('matrix_edit_row') }}",
			data: { rowId: id, matrixId: {{ entity.id }}, title: title, rowType: type },
			cache: false,
			success: function(data){
				if($.isNumeric(data)) {
					$(item).html(title);
					$(item).removeClass('inputMode');
					if(id == "0") {
						$(item).closest('li').attr('data-id', data);
					}
					rowsUpdated = true;
				}
				else {
					alert('Une erreur est survenue');
				}
			}
		});    
		return false;
	}
	
	function deleteRow(item, id, type) {
		if(id == 0) {
			$(item).remove();
		}
		else {
			if(confirm('Etes-vous sÃ»r(e) de vouloir supprimer cette ligne? Cette action est irrÃ©versible et dÃ©truit le contenu associÃ©.')){
				$.ajax({
					type: "POST",
					url: "{{ path('matrix_delete_row') }}",
					data: { rowId: id, matrixId: {{ entity.id }}, rowType: type },
					cache: false,
					success: function(data){
						if(data == 'ok') {
							$(item).remove();
							rowsUpdated = true;
						}
						else {
							alert('Une erreur est survenue');
						}
					}
				});
			}    
		}
		return false;
	}

	// Description arrow show dynamics
	$('#collapseDescription').on('show.bs.collapse', function(){
				$('a[href="#collapseDescription"] > span').removeClass('glyphicon-chevron-right').addClass('glyphicon-chevron-down');
			})
							.on('hide.bs.collapse', function(){
				$('a[href="#collapseDescription"] > span').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-right');
			});

	// Show on document initialize depends on trailing URL anchor set by link in matrix index list
	var possible_anchor = decodeURIComponent(window.location.href).split("#")[1];
	show_modal_edit = (possible_anchor == "show_edit") ? true : false;
	$('#myModal').modal({ show : show_modal_edit });
	</script>
{% endblock %}
