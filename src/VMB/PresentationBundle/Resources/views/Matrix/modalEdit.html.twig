{% extends "::Backend/subPage.html.twig" %}
{% form_theme form 'bootstrap_3_horizontal_layout.html.twig' %}

{# Modification doesn't work #}
{% block form_label_class %}
{% endblock form_label_class %}

{# TODO: Notifications, undo actions could go in H1 header center row?#}
{% block body %}
	{{dump(entity)}}
<div class="well">
{{ form_start(form) }}
<div class="form-group">
	{{form_label(form.title)}}
	<div class="col-sm-10">
	{{form_widget(form.title)}}
	</div>
</div>
<div class="form-group">
	{{form_label(form.topic)}}
	<div class="col-sm-10">
	{{form_widget(form.topic)}}
	</div>
</div>
<div class="form-group">
	{{form_label(form.description)}}
	<div class="col-sm-10">
	{{form_widget(form.description)}}
	</div>
</div>
<div class="form-group">
	<div class="col-md-6">
		<ul class="list-group Pov-list">
			<li class="list-group-item row">
				<div class="col-md-10 matrix-row-title">
					<h4 class="text-center">{{form.povs.vars.label}}</h4>
				</div>
				<div class="col-md-2 text-right">
					<button type="button" class="btn btn-default pull-right" onclick="addRow('Pov')">
						<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
					</button>
				</div>
			</li>
		{% for pov in form.povs %}
			<li class="list-group-item row">
			<div class="col-md-10 matrix-row-title">{{ form_widget(pov.title) }}</div>
			<div class="col-md-2 text-right">
				<button type="button" class="btn btn-danger" onclick="askConfirmDel(this)">
					<span class="glyphicon glyphicon-remove"></span>
				</button>
			</div>
			</li>
		{% endfor %}
		</ul>
	</div>
	<div class="col-md-6">
		<ul class="list-group Level-list">				
			<li class="list-group-item row">
				<div class="col-md-10 matrix-row-title">
					<h4 class="text-center">{{form.levels.vars.label}}</h4>
				</div>
				<div class="col-md-2 text-right">
					<button type="button" class="btn btn-default pull-right" onclick="addRow('Level')">
						<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
					</button>
				</div>
			</li>
		{% for lvl in form.levels %}
			<li class="list-group-item row">
			<div class="col-md-10 matrix-row-title">{{ form_widget(lvl.title) }}</div>
			<div class="col-md-2 text-right">
				<button type="button" class="btn btn-danger" onclick="askConfirmDel(this)">
					<span class="glyphicon glyphicon-remove"></span>
				</button>
			</div>
			</li>
		{% endfor %}
		</ul>
	</div>
</div>
{% if is_modal is defined %}	
	{{ form_widget(form._token) }}
{% else %}
	{{ form_end(form) }}
{% endif %}
</div>
{% endblock %}

{% block script %}
	<script type="text/javascript">
	var form_elt = $('form[name="vmb_presentationbundle_matrix"]');
	$(document).ready(function(){
		{#
		TODO: 
		- Declare action-undo list, helper functions to manage it
 		- Make sure indexes are consistent with database repr. 
 			(for example when something is deleted and the deletion is
  		undone it should be put back at its original index, 
 			not at a new index value, and next input names' indexes
  		changed accordingly)
		- Prep. batch request (to help minimize server diff processing) and persist at matrix/edit
		- Add hook to persistChanges (modal dialog floppy-disk button)
 		- Calculate resources to be deleted, notify user of cascade 
	 		consequences in a big red alert container? 
		// Enable popovers
		$('[data-toggle="popover"]').popover(); 
		#}

		// Loop through symfony-baked content to populate
		$("#vmb_presentationbundle_matrix_povs, #vmb_presentationbundle_matrix_levels").each(function(index, elt) {
		});
		
	});
	$("#myModal #save-btn").on('click', function(e){

			var form_data = $('form[name="vmb_presentationbundle_matrix"]').serializeArray();
			console.log(form_data);
			// persistChanges(form_data);
		});
	/*
	** Helper Functions for modal dialog
	*/
	function addRow(type){
		var ul_container =  $("."+type+"-list");
		var typ_str = type.toLowerCase()+"s";
		var nxt_id = $(ul_container).children().length - 1;
		// console.log(ul_container, nxt_id);
		$(ul_container).append('<li class="list-group-item row"><div class="col-md-10 matrix-row-title"><input type="text" id="vmb_presentationbundle_matrix_'+typ_str+'_'+nxt_id+'_title" name="vmb_presentationbundle_matrix['+typ_str+']['+nxt_id+'][title]" required="required" maxlength="64" class="form-control"></div><div class="col-md-2 text-right"><button type="button" class="btn btn-danger" onclick="askConfirmDel(this)"><span class="glyphicon glyphicon-remove"></span></button></div></li>');
	}

	/**
	 * Show a popover asking for delete confirmation with a warning.
	**/
	function askConfirmDel(elt)
	{
		var row_elt = $(elt).parentsUntil("ul");
		// row_elt[0] -> "Delete" part, row_elt[1] -> Whole row
		var del_button = $(row_elt[0]).find("button");
		var input = $(row_elt[1]).find(":input").attr('id');
		var confirmAlert = '<p class="text-danger">{{"matrix.deleteRowMessage"|trans}}</p><p class="btn-group pull-right"><button type="button" class="btn btn-danger" onclick="deleteRow(this,'+input+')">{{"actions.delete"|trans}}</button><button type="button" class="btn btn-default" onclick="cancelConfirm(this)">{{"actions.cancel"|trans}}</button></p>';

		// 'hidden.bs.popover' triggering twice!
		$(del_button).one('hidden.bs.popover', function(){
			$(this).popover('destroy');
		});

		// Initialize popover if it's undefined , otherwise toggle it
		if($("#myModal > .popover").length == 0)
		{
	    	$(del_button).popover({
	    		placement: 'top',
	    		html: true,
	    		title: '{{"matrix.deleteRowTitle"|trans}}',
	    		content: confirmAlert,
	    		container: '#myModal'
	    	});	
	    	$(del_button).popover('show');	
		} else {
    		$(del_button).popover('toggle');
		}
    	return false;
	}

	function cancelConfirm(elt)
	{
		$('#myModal > .popover').popover('destroy');
	}

	/**
	 * 
	 *
	 * TODO: save elt in undo-list before del?
	**/
	function deleteRow(elt, input_name){
		$('#myModal > .popover').popover('destroy');
		// explode input "id" attribute by "_"
		var expl = $(input_name).attr('id').split("_");
		var typ = expl[3].slice(0,1).toUpperCase() + expl[3].slice(1,expl[3].length-1);
		var dat = { rowId: expl[4], matrixId: {{ entity.id }}, rowType: typ};
		console.log(dat);
		// Actual data request to the server
		$.ajax({
			type: "POST",
			url: "{{ path('matrix_delete_row') }}",
			data: dat,
			cache: false,
			beforeSend: function(){
				console.log("[deleteRow] with data ["+dat.toString()+"]");
			},
			success: function(response){
				console.log("Response:"+response);
				// Remove row containing input_name
				$(input_name).closest(".list-group-item").remove();
			}
		});
	}

	function persistChanges(){
	$.ajax();
	}
	// Matrix rows management
	function updateTitle(item, id, type, title) {
		$.ajax({
			type: "POST",
			url: "{{ path('matrix_edit_row') }}",
			data: { rowId: id, matrixId: {{ entity.id }}, title: title, rowType: type },
			cache: false,
			success: function(data){
				if($.isNumeric(data)) {
					$(item).html(title);
					$(item).removeClass('inputMode');
					if(id == "0") {
						$(item).closest('li').attr('data-id', data);
					}
					rowsUpdated = true;
				}
				else {
					alert('Une erreur est survenue');
				}
			}
		});    
		return false;
	}
	</script>
{% endblock %}
