{% extends '::Backend/subPage.html.twig' %}

{% set firstResource = null %}
{% if alternativeResources|length == 0 %}
	{% if entity.resources|length != 0 %}
		{% for checkedRes in entity.resources if firstResource == null %}
			{% if checkedRes.suggested == 0 %}
				{% set firstResource = checkedRes.usedResource %}
			{% endif %}
		{% endfor %}
	{% endif %}
{% else %}
	{% set firstResource = alternativeResources[0].usedResource %}
{% endif %}

{% block body %}
    <div class="row">
		<div class="col-sm-9">
			{% include '::players.html.twig' %}
		</div>
		<div class="col-sm-3">
			<h4><span class="glyphicon glyphicon-th-list" aria-hidden="true"></span> Liste de lecture</h4>
			{% set totalDuration = 0 %}
			<ul class="list-group" id="file_list">
				{% set firstLoop = true %}
				{% if alternativeResources|length == 0 %}
					{% for res in entity.resources %}
						{% if res.suggested == false %}
							{% set totalDuration = totalDuration + res.getDuration %}
							<li class="list-group-item{% if firstLoop %} active{% set firstLoop = false %}{% endif %}" id="addedRes_{{ res.usedResource.id }}" data-id="{{ res.usedResource.id }}">
								<div class="row">
									<div class="col-sm-8"><span class="glyphicon glyphicon-{{ res.usedResource.resource.getGlyphicon }}" aria-hidden="true"></span> {{ res.usedResource.resource.title[:20] }}</div>
									<div class="col-sm-4">{{ "%02d"|format(res.getDuration // 60) }}:{{ "%02d"|format(res.getDuration % 60) }}</div>
								</div>
							</li>
						{% endif %}
					{% endfor %}
				{% else %}
					{% for res in alternativeResources %}
						{% set totalDuration = totalDuration + res.getDuration %}
						<li class="list-group-item{% if firstLoop %} active{% set firstLoop = false %}{% endif %}" id="addedRes_{{ res.usedResource.id }}" data-id="{{ res.usedResource.id }}">
							<div class="row">
								<div class="col-sm-8"><span class="glyphicon glyphicon-{{ res.usedResource.resource.getGlyphicon }}" aria-hidden="true"></span> {{ res.usedResource.resource.title[:20] }}</div>
								<div class="col-sm-4">{{ "%02d"|format(res.getDuration // 60) }}:{{ "%02d"|format(res.getDuration % 60) }}</div>
							</div>
						</li>
					{% endfor %}
				{% endif %}
			</ul>
			<div class="presentation-controls text-center">
				<div class="btn-group" role="group" aria-label="...">
				  <button id="presentation-prev-btn" type="button" class="btn btn-default"><span class="glyphicon glyphicon-step-backward" aria-hidden="true"></span></button>
				  <button id="presentation-play-btn" type="button" class="btn btn-default"><span class="glyphicon glyphicon-play" aria-hidden="true"></span></button>
				  <button id="presentation-fullscreen-btn" type="button" class="btn btn-default"><span class="glyphicon glyphicon-fullscreen" aria-hidden="true"></span></button>
				  <button id="presentation-next-btn" type="button" class="btn btn-default"><span class="glyphicon glyphicon-step-forward" aria-hidden="true"></span></button>
				</div>
			</div>
			<p class="text-center">
				Durée totale : <span id="total_duration">{{ "%02d"|format(totalDuration // 60) }}:{{ "%02d"|format(totalDuration % 60) }}</span>
			</p>
			<div class="text-center"><a href="{{ path('presentation_complementary', {'id': entity.id}) }}" type="button" class="btn btn-primary">Voir plus <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></a></div>
		</div>
    </div>
    <hr/>
    {% if firstResource != null %}
    <div id="additional-infos">
		<h3 class="view-more-title"><a data-toggle="collapse" href="#collapseDescription" aria-expanded="false" aria-controls="collapseDescription">Détails de la ressource actuelle <span class="glyphicon glyphicon-chevron-down"></span></a></h3>
		<div class="collapse" id="collapseDescription">
			<table class="table">
				<tbody>
					<tr>
						<th width="120px">Titre</th>
						<td id="current-res-title">{{ firstResource.resource.title }}</td>
					</tr>
					<tr>
						<th width="120px">Position</th>
						<td id="current-res-position">{{ firstResource.pov.title }} - {{ firstResource.level.title }}</td>
					</tr>
					<tr>
						<th width="120px">Description</th>
						<td id="current-res-description">{{ firstResource.resource.description }}</td>
					</tr>
					<tr>
						<th>Création</th>
						<td id="current-res-creation">{{ firstResource.resource.dateCreate|date('d/m/y') }}</td>
					</tr>
					<tr>
						<th>Mise à jour</th>
						<td id="current-res-update">{{ firstResource.resource.dateUpdate|date('d/m/y') }}</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
	{% endif %}
{% endblock %}


{% block script %}
	{{ parent() }}
	<script>
	playing = false;
	clickOnPlayer = false;
	currentTimeout = null;
	fullscreenMode = false;
	
	resourcesCollection = {
		{% if alternativeResources|length == 0 %}
			{% for res in entity.resources %}
				{% if res.suggested == false %}
					{{ res.usedResource.id }}: {
						'pov': "{{ res.usedResource.pov.title }}", 
						'level': "{{ res.usedResource.level.title }}", 
						'title': "{{ res.usedResource.resource.title }}", 
						'description': "{{ res.usedResource.resource.description }}", 
						'creation': "{{ res.usedResource.resource.dateCreate|date('d/m/y') }}", 
						'update': "{{ res.usedResource.resource.dateUpdate|date('d/m/y') }}", 
						'duration': {{ res.getDuration|default(11) }},
						'duration_str': "{{ "%02d"|format(res.getDuration // 60) }}:{{ "%02d"|format(res.getDuration % 60) }}",
						'src': "{{ asset(res.usedResource.resource.getResourcePath) }}",
						'type': "{{ res.usedResource.resource.type }}"
					},
				{% endif %}
			{% endfor %}
		{% else %}
			{% for res in alternativeResources %}
				{{ res.usedResource.id }}: {
					'pov': "{{ res.usedResource.pov.title }}", 
					'level': "{{ res.usedResource.level.title }}", 
					'title': "{{ res.usedResource.resource.title }}", 
					'description': "{{ res.usedResource.resource.description }}", 
					'creation': "{{ res.usedResource.resource.dateCreate|date('d/m/y') }}", 
					'update': "{{ res.usedResource.resource.dateUpdate|date('d/m/y') }}", 
					'duration': {{ res.getDuration|default(11) }},
					'duration_str': "{{ "%02d"|format(res.getDuration // 60) }}:{{ "%02d"|format(res.getDuration % 60) }}",
					'src': "{{ asset(res.usedResource.resource.getResourcePath) }}",
					'type': "{{ res.usedResource.resource.type }}"
				},
			{% endfor %}
		{% endif %}	
	};
	
	resourcesOrder = [ {% if alternativeResources|length == 0 %}
			{% for res in entity.resources %}
				{% if res.suggested == false %}
					{{ res.usedResource.id }},
				{% endif %}
			{% endfor %}
		{% else %}
			{% for res in alternativeResources %}
				{{ res.usedResource.id }},
			{% endfor %}
		{% endif %} ];
		
	selectedRes = {{ firstResource.id|default(0) }};
	
	{% include '::plyrSetup.html.twig' %}
	
	function setNextResourceTimeout(secDelay) {
		if(currentTimeout != null) {
			clearTimeout(currentTimeout);
		}
		currentTimeout = setTimeout(function() { nextResource(); }, secDelay*1000);
	}
	
	function triggerNewRes(resId) {
		if(selectedRes != resId) {
			updateFullscreenValue();
			res = resourcesCollection[resId];
			
			retoggleFullscreen = false;
			if(fullscreenMode && resourcesCollection[selectedRes]['type'] == 'video' && res['type'] != 'video') {
				retoggleFullscreen = true;
			}
			
			$('#addedRes_' + selectedRes).removeClass('active');
			selectedRes = resId;
			
			if(retoggleFullscreen) { toggleFullScreen(fullscreenMode); }
			
			stopAndHideAll(res['type']);
			$('#addedRes_' + resId).addClass('active');
			$('#current-res-title').html(res['title']);
			$('#current-res-position').html(res['pov'] + ' - ' + res['level']);
			$('#current-res-creation').html(res['creation']);
			$('#current-res-update').html(res['update']);
			$('#current-res-description').html(res['description']);
			
			displayNewRes(res['src'], res['type'], playing);
			// If it's a picture/file we trigger the countdown manually (since there is no player)
			if(playing && res['type'] != 'audio' && res['type'] != 'video') {
				setNextResourceTimeout(res['duration']);
			}
		}
	}
	
	function indexOf(array, item) {
		for (var i = 0; i < array.length; i++) {
			if (array[i].toString() === item.toString()) return i;
		}
		return -1;
	}
	
	function prevResource() {
		i = indexOf(resourcesOrder, selectedRes);
		i--;
		if(i >= 0) {
			clearTimeout(currentTimeout);
			triggerNewRes(resourcesOrder[i]);
		}
	}
	
	function nextResource() {
		i = indexOf(resourcesOrder, selectedRes);
		i++;
		if(i < resourcesOrder.length) {
			clearTimeout(currentTimeout);
			triggerNewRes(resourcesOrder[i]);
		}
	}
	
	function updateFullscreenValue() {
		res = resourcesCollection[selectedRes];
		if(res['type'] == 'video') {
			oldVal = fullscreenMode;
			fullscreenMode = document.querySelectorAll(".player")[0].plyr.isFullscreen();
			if(oldVal != fullscreenMode) {
				if(fullscreenMode) {
					$('#players_container').removeClass('fullScreenPlayer');
					$('#players_container').addClass('fullScreenPlayer');
					$('#file_list').closest('.col-sm-3').hide();
					$('#additional-infos').hide();
				}
				else {
					$('#players_container').removeClass('fullScreenPlayer');
					$('#file_list').closest('.col-sm-3').show();
					$('#additional-infos').show();
				}
			}
		}
	}
	
	function toggleFullScreen(fullscreen) {
		// Default value
		fullscreen = fullscreen || null;
		
		updateFullscreenValue();
		res = resourcesCollection[selectedRes];

		oldValue = fullscreenMode;
		fullscreenMode = (fullscreen == null) ? !fullscreenMode : fullscreen;
		
		if(oldValue != fullscreenMode) {		
			document.querySelectorAll(".player")[0].plyr.toggleFullscreen();
		}
		
		if(fullscreenMode) {
			$('#players_container').removeClass('fullScreenPlayer');
			$('#players_container').addClass('fullScreenPlayer');
			$('#file_list').closest('.col-sm-3').hide();
			$('#additional-infos').hide();
		}
		else {
			$('#players_container').removeClass('fullScreenPlayer');
			$('#file_list').closest('.col-sm-3').show();
			$('#additional-infos').show();
		}
	}
	
	function playerPlayButton(play) {
		playAction(play, true);
	}
	
	function playAction(newValue, fromPlayerControls) {
		// Default value
		newValue = newValue || null;
		fromPlayerControls = fromPlayerControls || false;
		
		oldValue = playing;
		playing = (newValue != null) ? newValue : !playing;
		
		// In order to avoid an infinite loop of actions (playAction > onplaying > playAction > ...)
		if(oldValue != playing) {
			res = resourcesCollection[selectedRes];
			
			// If we want to play the resource
			if(playing) {
				span = $('#presentation-play-btn .glyphicon-play');
				$(span).addClass('glyphicon-pause');
				$(span).removeClass('glyphicon-play');
				
				if(res['type'] == 'video') {
					videoPlayer = document.querySelectorAll(".player")[0].plyr;
					if(!fromPlayerControls) { videoPlayer.play(); }
				}
				else if(res['type'] == 'audio') {
					audioPlayer = document.querySelectorAll(".player")[1].plyr;		
					if(!fromPlayerControls) { audioPlayer.play(); }
				}
				else {
					setNextResourceTimeout(res['duration']);
				}
			}
			else {
				span = $('#presentation-play-btn .glyphicon-pause');
				$(span).addClass('glyphicon-play');
				$(span).removeClass('glyphicon-pause');
				
				if(res['type'] == 'video') {
					videoPlayer = document.querySelectorAll(".player")[0].plyr;
					if(!fromPlayerControls) { videoPlayer.pause(); }
				}
				else if(res['type'] == 'audio') {
					audioPlayer = document.querySelectorAll(".player")[1].plyr;		
					if(!fromPlayerControls) { audioPlayer.pause(); }
				}
				else {
					clearTimeout(currentTimeout);
				}
			}
		}
	}
	
	$('#presentation-prev-btn').click(function() 	  { prevResource(); });
	$('#presentation-play-btn').click(function() 	  { playAction(); });
	$('#presentation-next-btn').click(function() 	  { nextResource(); });
	$('#presentation-fullscreen-btn').click(function() { toggleFullScreen(); });
	$('#file_list .list-group-item').click(function() {	triggerNewRes($(this).attr('data-id'));	});
	
	function bindControls() {
		var video = $('video')[0];
		$(document.querySelectorAll(".player")[0]).bind('click',   function(e) { clickOnPlayer = true; });
		$(video).bind('ended',   function(e) { nextResource(); });
		$(video).bind('playing', function(e) { if(clickOnPlayer) { playerPlayButton(true); clickOnPlayer = false; } });
		$(video).bind('pause',   function(e) { if(clickOnPlayer) { playerPlayButton(false); clickOnPlayer = false; } });
		
		var audio = $('audio')[0];
		$(document.querySelectorAll(".player")[1]).bind('click',   function(e) { clickOnPlayer = true; });
		$(audio).bind('ended',   function(e) { nextResource(); });
		$(audio).bind('playing', function(e) { if(clickOnPlayer) { playerPlayButton(true); } });
		$(audio).bind('pause',   function(e) { if(clickOnPlayer) { playerPlayButton(false); } });
	}
	
	$('html').keyup(function(e){
		// This is not called if the video player is full screen (the event will be managed by the browser)
		if(e.key == 'Escape') {
			toggleFullScreen(false);
		}
	});
	
	bindControls();    
	setInterval(function() { updateFullscreenValue(); }, 200);
	</script>
{% endblock %}
