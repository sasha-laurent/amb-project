{% if copy == false %}
	{% set saveButton = 'true' %}
	{% set entity = presentation %}
{% endif %}
{% extends "::Backend/subPage.html.twig" %}
{% form_theme form 'bootstrap_3_horizontal_layout.html.twig' %}

{% set cellWidth = (830 / matrix.levels|length) %}
{% if cellWidth > 120 %}
	{% set cellWidth = 120 %}
{% endif %}
{% set cellHeight = cellWidth * 9 / 16 %}

{% block body -%}
{# If no resources are included in the presentation's matrix 
	kindly redirect the user to the matrix/show page. #}
{% if matrix.resources.snapshot is empty %}
<p class="text-center bg-warning btn-lg">
	<a href="{{path('matrix_show', {'id' : matrix.id} )}}">{{ 'presentation.is_empty_add_content'|trans|raw }}</a>
</p>
{% endif %}

{{ form_start(form, {'attr': {'id': 'presentation_form', 'class': 'form-horizontal'}}) }}
	<div class="well">
		{# Les erreurs générales du formulaire. #}
		{{ form_errors(form) }}
		<div class="form-group">
			{# Génération du label. #}
			{{ form_label(form.title, "Titre", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

			{# Affichage des erreurs pour ce champ précis. #}
			{{ form_errors(form.title) }}

			<div class="col-sm-10">
			{# Génération de l'input. #}
			{{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>

		{# Idem pour un autre champ. #}
		<div class="form-group">
			{{ form_label(form.description, "Description", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}
			{{ form_errors(form.description) }}
			<div class="col-sm-10">
			{{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
		
		<div class="form-group">
			{# Génération du label. #}
			{{ form_label(form.file, "Miniature", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

			{# Affichage des erreurs pour ce champ précis. #}
			{{ form_errors(form.file) }}

			<div class="col-sm-10">
			{# Génération de l'input. #}
			{{ form_widget(form.file, {'attr': {'class': 'form-control'}}) }}
			</div>
			
		</div>
		{% if not copy %}
			<div class="row">
				<div class="col-sm-2"></div>
				<div class="col-sm-10">
					{% if presentation.hasThumbs() %}
						<em>{{ 'form.label.current_thumbnail'|trans }} :</em> <img src="{{ asset(presentation.getThumbsPath()) }}" title="Miniature" /> <button class="btn btn-default" id="delete_thumbs" type="button" role="button"><span class="glyphicon glyphicon-remove"></span></button>
					{% endif %}
					<input type="hidden" name="keepThumbs" id="keepThumbs" value="{% if presentation.hasThumbs() %}1{% else %}0{% endif %}" />
				</div>
			</div>
		{% endif %}
	</div>
	
	{% if copy %}
	<div class="text-center">
		<a class="wide-btn btn btn-primary" role="button" type="button" href="{{ path('presentation_show', {'id': presentation.id}) }}"><span class="left glyphicon glyphicon-chevron-left" aria-hidden="true"></span> Revenir à la présentation initiale</a>
	</div>
	{% endif %}
	<hr/>
    <table style="width:{{ cellWidth*matrix.levels|length + 120}}px;" id="matrix" class="table table-bordered">
		<tr class="compact_tr">
			<th width="120px"></th>
			{% for level in matrix.levels %}
			<th width="{{ cellWidth }}px" class="text-center">{{ level.title }}</th>
			{% endfor %}
		</tr>
		{% for pov in matrix.povs %}
		<tr height="{{ cellHeight }}px">
			<th class="text-center">{{ pov.title }}</th>
			{% for level in matrix.levels %}
			<td id="td_{{ pov.id ~ "_" ~ level.id }}" data-prototype="{{ pov.id ~ "_" ~ level.id }}" class="text-center"></td>
			{% endfor %}
		</tr>
		{% endfor %}
	</table>
	<div class="presentation-legend text-center">
		<br/>
		<i>
			{% if display != 'normal' %}
				<span class="teacherRes glyphicon glyphicon-ok" aria-hidden="true"></span> = {{ 'presentation.initial_presentation'|trans }} |
				<span class="suggestedRes glyphicon glyphicon-ok" aria-hidden="true"></span> = {{ 'presentation.suggested_presentation'|trans }} |
				<span class="checkedRes glyphicon glyphicon-ok" aria-hidden="true"></span> = {{ 'presentation.my_selection'|trans }}
			{% else %}
				<span class="checkedRes glyphicon glyphicon-ok" aria-hidden="true"></span> = {{ 'presentation.added_to_playlist'|trans }} |
				<span class="suggestedRes glyphicon glyphicon-ok" aria-hidden="true"></span> = {{ 'presentation.suggested_as_complement'|trans }}
			{% endif %}
		</i>
	</div>
	{% if display != 'normal' %}
	<div class="text-center">
		<br/>
		<button id="save_new_presentation" class="wide-btn btn btn-info" role="button" type="button"><span class="left glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> {{ 'presentation.save_selection'|trans }}</button>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<button id="submit_new_presentation" class="wide-btn btn btn-success" role="button" type="button"><span class="glyphicon glyphicon-play" aria-hidden="true"></span> {{ 'presentation.play_selection'|trans }}</button>
	</div>
	{% endif %}
	<hr/>
	<div class="row">
		<div class="col-sm-7">
			<h4><span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span> {{ 'browse.preview_current_resource'|trans }}</h4>
			{% include '::players.html.twig' %}
			<br/>
		</div>
		<div class="col-sm-5">
			{% set totalDuration = 0 %}
			{% set totalDurationSuggestion = 0 %}
			<h4><span class="glyphicon glyphicon-th-list" aria-hidden="true"></span> {{ 'show.playlist'|trans }}</h4>
			{% if display == 'normal' %}
				<div role="tab-panel">
					<ul class="nav nav-tabs" role="tablist">
						<li role="presentation" class="active" id="playlist-tab-toggle"><a href="#playlist_tab" aria-controls="playlist_tab" role="tab" data-toggle="tab">{{ 'show.playlist'|trans }}</a></li>
						<li role="presentation" id="suggestion-tab-toggle"><a href="#suggestion_tab" aria-controls="suggestion_tab" role="tab" data-toggle="tab">{{ 'presentation.suggestions'|trans }}</a></li>
					</ul>
					<div class="tab-content">
						<div role="tabpanel" class="tab-pane active" id="playlist_tab">
			{% endif %}
							<ul class="list-group" id="file_list">
								{% if display == 'normal' %}
									{% for res in presentation.resources %}
										{% if res.suggested == false %}
											{% set totalDuration = totalDuration + res.duration %}
											<li class="list-group-item playableResource playableRes_{{res.usedResource.id}}" id="addedRes_{{ res.usedResource.id }}" data-duration="{{ res.duration }}" data-type="used" data-id="{{ res.usedResource.id }}">
												<div class="row">
													<div class="col-sm-7"><span class="glyphicon glyphicon-{{ res.usedResource.resource.getGlyphicon }}"></span> {{ res.usedResource.resource.title }}</div>
													<div class="col-sm-3 text-right">
														{% if res.usedResource.resource.type != 'video' and res.usedResource.resource.type != 'audio' %}
															<a class="editTimeButton"><span class="glyphicon glyphicon-edit"></span></a> 
														{% endif %}
														<span class="durationContainer">{{ "%02d"|format(res.duration // 60) }}:{{ "%02d"|format(res.duration % 60) }}</span>
													</div>
													<div class="col-sm-2 text-right"><a class="rmRes" id="rmRes_{{ res.usedResource.id }}" data-type="used" data-id="{{ res.usedResource.id }}"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></div>
													<input type="hidden" id="usedResource_{{ res.usedResource.id }}" name="usedResource_{{ res.usedResource.id }}_{{ res.duration }}" value="{{ res.sort }}" />
												</div>
											</li>
										{% endif %}
									{% endfor %}
								{% endif %}
							</ul>
							<p class="text-right">
								{{ 'show.total_duration'|trans }} : <span id="total_duration">{{ "%02d"|format(totalDuration // 60) }}:{{ "%02d"|format(totalDuration % 60) }}</span>
							</p>
							{% if presentation.id and (not copy) %}
								<p class="text-center"><a href="{{ path('annotation_edit', {'id' : presentation.id}) }}"><span class="glyphicon glyphicon-edit"></span> Gérer les annotations</a></p>
							{% endif %}
						{% if display == 'normal' %}
						</div>
						<!-- Suggestions -->
						<div role="tabpanel" class="tab-pane" id="suggestion_tab">
							<ul class="list-group" id="suggestion_list">
							{% for res in presentation.resources %}
								{% if res.suggested == true %}
									{% set totalDurationSuggestion = totalDurationSuggestion + res.duration %}
									<li class="list-group-item playableResource suggestedRes_{{res.usedResource.id}}" id="suggestedRes_{{ res.usedResource.id }}" data-duration="{{ res.duration }}"  data-type="suggestion" data-id="{{ res.usedResource.id }}">
										<div class="row">
											<div class="col-sm-7"><span class="glyphicon glyphicon-{{ res.usedResource.resource.getGlyphicon }}"></span> {{ res.usedResource.resource.title }}</div>
											<div class="col-sm-3 text-right">
												{% if res.usedResource.resource.type != 'video' and res.usedResource.resource.type != 'audio' %}
													<a class="editTimeButton"><span class="glyphicon glyphicon-edit"></span></a> 
												{% endif %}
												<span class="durationContainer">{{ "%02d"|format(res.duration // 60) }}:{{ "%02d"|format(res.duration % 60) }}</span>
											</div>
											<div class="col-sm-2 text-right"><a class="rmRes" id="rmRes_{{ res.usedResource.id }}" data-type="suggestion" data-id="{{ res.usedResource.id }}"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></div>
											<input type="hidden" id="suggestedResource_{{ res.usedResource.id }}" name="suggestedResource_{{ res.usedResource.id }}_{{ res.duration }}" value="{{ res.sort }}" />
										</div>
									</li>
								{% endif %}
							{% endfor %}
							</ul>
							<p class="text-right">
								{{ 'show.total_duration'|trans }} : <span id="total_duration_suggestion">{{ "%02d"|format(totalDurationSuggestion // 60) }}:{{ "%02d"|format(totalDurationSuggestion % 60) }}</span>
							</p>
						</div>
					</div><!-- .tab-content -->
				</div><!-- role=tab-panel -->
			{% endif %}
		</div>
	</div>
	{{ form_widget(form.save, {'attr': {'style': 'display:none;', 'class': 'btn btn-primary'}}) }}
	{{ form_rest(form) }}
	{# Fermeture de la balise <form> du formulaire HTML #}
	{{ form_end(form) }}
	{# Include more info here - which topic does the matrix belong to? Who was the original creator of the matrix?#}
{% endblock %}

{% block script %}
	{{ parent() }}
	<script>	
	var places = ["bottom", "left", "top", "right"];	
	resourcesCollection = {
		{% for usedRes in matrix.resources %}
			{{ usedRes.id }}: {
				'path': "{{ usedRes.resource.path }}", 
				'title': "{{ usedRes.resource.title }}", 
				'shortTitle': "{{ usedRes.resource.title|shortenText(18, '...') }}", 
				'thumbs': "{{ asset(usedRes.resource.getThumbsPath) }}",
				'description': "{{ usedRes.resource.description }}", 
				'shortDesc': "{{ usedRes.resource.description|shortenText(140, "...") }}", 
				'creation': "{{ usedRes.resource.dateCreate|date('d/m/y') }}", 
				'update': "{{ usedRes.resource.dateUpdate|date('d/m/y') }}", 
				'duration': {{ usedRes.resource.duration|default(11) }},
				'duration_str': "{{ "%02d"|format((usedRes.resource.duration|default(11)) // 60) }}:{{ "%02d"|format((usedRes.resource.duration|default(11)) % 60) }}",
				'src': "{{ asset(usedRes.resource.getResourcePath) }}",
				'type': "{{ usedRes.resource.type }}",
				'glyphicon': "{{ usedRes.resource.getGlyphicon }}"
			},
		{% endfor %}
	};
	selectedRes = 0;
	$(document.querySelectorAll(".player")[0]).show();
	
	function indexOf(array, item) {
		for (var i = 0; i < array.length; i++) {
			if (array[i].toString() === item.toString()) return i;
		}
		return -1;
	}
	
	{% include '::plyrSetup.html.twig' %}
	
	// Matrix object
	function Matrix() {	
		this.boxes = {};
		
		this.getBox = function(coords) { return this.boxes[coords]; };
	};
	
	Matrix.prototype.addBox = function(pov, lvl, resList) {
		this.boxes[pov + "_" + lvl] = new Box(pov, lvl, resList);
		this.boxes[pov + "_" + lvl].generateBox();
	};
	
	Matrix.prototype.generatePopover = function(boxId) {
		return this.boxes[boxId].generatePopover();
	};
	
	Matrix.prototype.updateResourceStatus = function(resId, newStatus) {
		$.each(this.boxes, function(key, box) {
			return !box.updateResourceStatus(resId, newStatus);
		});
	}
	
	// Box (td) object
	function Box(pov, lvl, resList) {
		this.pov = pov;
		this.lvl = lvl;
		this.resList = resList;
		this.domElt = $('#td_' + this.pov + '_' + this.lvl);
		this.nbInitial = 0;
		this.nbChecked = 0;
		this.nbSuggested = 0;
	};
	
	Box.prototype.updateResourceStatus = function(resId, newStatus) {
		for(var i=0; i<this.resList.length; i++) {
			if(this.resList[i].getId() == resId) {
				oldStatus = this.resList[i].getStatus();
				if(oldStatus != newStatus) {
					// If the status update is ok
					if(this.resList[i].updateStatus(newStatus)) {
						if(newStatus == 'suggested') { this.nbSuggested++; }
						else if(newStatus == 'checked') { this.nbChecked++; }
						
						if(oldStatus == 'suggested') { this.nbSuggested--; }
						else if(oldStatus == 'checked') { this.nbChecked--; }
						
						this.updateCounters();
					}
				}
				return true;
			}
		}
		return false;
	}
	
	Box.prototype.updateCounters = function() {
		this.domElt.find('.nbSuggested').html(this.nbSuggested);
		this.domElt.find('.nbChecked').html(this.nbChecked);
	}
	
	Box.prototype.generateBox = function() {
		for(var i=0; i<this.resList.length; i++) {
			if(this.resList[i].isChecked())   { this.nbChecked++; }
			if(this.resList[i].isSuggested()) { this.nbSuggested++; }
			if(this.resList[i].isInitial()) { this.nbInitial++; }
		}
		
		var str = '<div class="tileUsedResource" data-coordinates="' + this.pov + '_' + this.lvl + '" data-length="' + this.resList.length + '" data-toggle="popover" ';
		if(this.resList.length > 0) {
			str += 'style="' + this.resList[0].getBackgroundStyle() + '"><div class="nbResources"> \
				<div class="total nbTotal">' + this.resList.length + '</div> \
				<div class="counterCheck{% if display != 'normal' %} copyMode{% endif %}"> {% if display != 'normal' %}<span class="nbInitial">' + this.nbInitial + '</span> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span><br/>{% endif %}\
					<span class="nbChecked">' + this.nbChecked + '</span> <span class="glyphicon glyphicon-ok checkedRes" aria-hidden="true"></span><br/>\
					<span class="nbSuggested">' + this.nbSuggested + '</span> <span class="glyphicon glyphicon-ok suggestedRes" aria-hidden="true"></span> \
				</div> \
			</div>';
		}
		else {
			str += 'style="background-image: none;"><div class="nbResources noBg"></div>';
		}
		str += '</div>';
		
		this.domElt.html(str);
	};
	
	Box.prototype.generatePopover = function() {
		var str = '';
		for(i=0; i < this.resList.length; i++) {
			str += this.resList[i].getPopoverContent();
		}
		return str;
	};
		

	// Used Resource Object
	function Resource(usedResId, checked, suggested{% if display != 'normal' %}, initial{% endif %}) {
		this.usedResId = usedResId;
		{% if display != 'normal' %}
		this.initial = initial;
		{% endif %}
		this.suggested = suggested;
		this.checked = checked;

		this.isInitial	 		= function() { return (this.initial == 1); }
		this.isSuggested 		= function() { return (this.suggested == 1); }
		this.isChecked 			= function() { return (this.checked == 1); }
		this.setId				= function(newId) { this.usedResId = newId; }
		this.getId				= function() { return this.usedResId; };
		this.getTitle 			= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].title 			 	  : ''; };
		this.getThumbs 			= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].thumbs 			 	  : ''; };
		this.getDuration		= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].duration 			 	  : ''; };
		this.getPath			= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].path	 			 	  : ''; };
		this.getDurationStr		= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].duration_str		 	  : ''; };
		this.getShortTitle 		= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].shortTitle 		 	  : ''; };
		this.getDesc 			= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].description 		 	  : ''; };
		this.getShortDesc 		= function() { return (this.usedResId != 0) ? resourcesCollection[this.usedResId].shortDesc 		 	  : ''; };
		this.getBackgroundStyle = function() { return (this.usedResId != 0) ? 'background-image: url(' + this.getThumbs() + ');' : 'background-image: none;'; };
	};
	
	Resource.prototype.getPopoverContent = function() {
		var str = '<div class="usedResource" data-id="' + this.getId() + '" style="background-image:url(' + this.getThumbs() + ');">';
		str += '<div class="resThumbnailHover{% if display == 'normal' %}' + ((this.isSuggested()) ? ' suggestedRes' : '') + ((this.isChecked()) ? ' checkedRes' : '') + '{% endif %}" id="usedRes_' + this.getId() + '" data-id="' + this.getId() + '" data-toggle="popover" data-trigger="hover"';
		str += ' data-duration="' + this.getDuration()  + '" data-title="' + this.getTitle() + '" data-content="' + this.getDesc() + '" data-resurl="' + this.getPath() + '">';
		str += '<span class="resTitle">' + this.getShortTitle() + '</span><span class="resCheckBox">';
		
		{% if display != 'normal' %}
			if(this.isInitial()) {
				str += '<span class="glyphicon glyphicon-ok teacherRes" aria-hidden="true"></span>';
			}
			else if(this.isSuggested()) {
				str += '<span class="glyphicon glyphicon-ok suggestedRes" aria-hidden="true"></span>';
			}
			else {
				str += '<span class="glyphicon glyphicon-ok" aria-hidden="true"></span>';
			}
		{% endif %}
		str += '<span class="user-glyphicon glyphicon glyphicon-ok" aria-hidden="true"></span>';
		
		return str + '</span></div></div>';
	};
	
	Resource.prototype.getStatus = function() {
		{% if display != 'normal' %}
			return (this.isChecked()) ? 'checked' : 'none';
		{% else %}
			if(this.isSuggested()) {
				return 'suggested';
			}
			else if(this.isChecked()) {
				return 'checked';
			}
			else {
				return 'none';
			}
		{% endif %}
	};
	
	Resource.prototype.updateStatus = function(newStatus) {
		if(newStatus == 'suggested') {
			this.suggested = 1;
			this.checked = 0;
			return true;
		}
		else if(newStatus == 'checked') {
			this.suggested = 0;
			this.checked = 1;
			return true;
		}
		else if(newStatus == 'none') {
			this.suggested = 0;
			this.checked = 0;
			return true;
		}
		return false;
	};
	
	function bindPopover(selector) {
		$(selector).popover({
			html: true,
			placement: "bottom",
			trigger: "click",
			content: function() { return matrix.generatePopover($(this).attr('data-coordinates')); }
		}).on("show.bs.popover", function () { 
			$('.tileUsedResource').not(this).popover('hide');
			elt = $('> .popover-content', $(this).data("bs.popover").tip());
			elt.css("height", 67 + 12 * 2 + 'px'); 
			elt.css("width", ($(this).attr('data-length') * 120 + ($(this).attr('data-length') - 1) * 4 + 12*2) + "px"); 
		}).on('hidden.bs.popover', function () {
			$(this).removeClass('activeTile');
		}).on('shown.bs.popover', function () {
			$(this).addClass('activeTile');
			
			// Click behaviour
			$('> .popover-content', $(this).data("bs.popover").tip()).find('.resThumbnailHover').click(function(){
				var duration = parseInt($('#usedRes_' + $(this).attr('data-id')).attr('data-duration'), 10);
				
				if($(this).hasClass('checkedRes')) {
					deleteFromPlaylist($(this).attr('data-id'), 'used');
					
					{% if display == 'normal' %}
					addToPlaylist($(this).attr('data-id'), $(this).attr('data-title'), 'suggestion');
					{% endif %}
				}
				else if($(this).hasClass('suggestedRes')) {
					deleteFromPlaylist($(this).attr('data-id'), 'suggestion');
				}
				else {
					addToPlaylist($(this).attr('data-id'), $(this).attr('data-title'), 'used');
				}
			});
			
			// Right click behaviour
			$('> .popover-content', $(this).data("bs.popover").tip()).unbind('contextmenu');
			$('> .popover-content', $(this).data("bs.popover").tip()).on('contextmenu', function(event) {
				// on right click : modify popover position (clockwise)
				$(this).data("bs.popover").options.placement = places[(indexOf(places, $(this).data("bs.popover").options.placement) + 1) % 4];
				$(this).popover('show');
				return false;
			}.bind(this));
		});
		
		$(selector).on('contextmenu', function(event) {
			// on right click : modify popover position (clockwise)
			$(this).data("bs.popover").options.placement = places[(indexOf(places, $(this).data("bs.popover").options.placement) + 1) % 4];
			$(this).popover('show');
			return false;
		});
	}
	
	function triggerNewRes(resId) {
		if(selectedRes != resId) {
			$('.playableRes_' + selectedRes).removeClass('active');
			selectedRes = resId;
			res = resourcesCollection[resId];
			stopAndHideAll(res['type']);
			$('.playableRes_' + resId).addClass('active');
			
			displayNewRes(res['src'], res['type']);
		}
	}
	
	$('.playableResource').click(function() {
		triggerNewRes($(this).attr('data-id'));
	});
	
	function pad(num, size) {
		var s = num+"";
		while (s.length < size) s = "0" + s;
		return s;
	}

	function convertDurationToString(value) {
		return (pad(~~(value / 60), 2)) + ':' + pad((value % 60), 2);
	}
	
	function addToDuration(value, toSuggestions) {
		// Default value
		toSuggestions = toSuggestions || false;
		
		// conv base10
		var container =  toSuggestions ? "#total_duration_suggestion" : "#total_duration";
		
		var current = $(container).html().split(":");
		total = parseInt(current[0], 10)*60 + parseInt(current[1], 10) + value;
		$(container).html(convertDurationToString(total));
		
		if(!toSuggestions) {
			$('#vmb_presentationbundle_presentation_duration').val(total);
		}
	}
	
	
	function editTime(item) {
		var li = $(item).closest('.playableResource');
		var oldDuration = li.attr('data-duration');
		var newDuration = prompt("Entrez la nouvelle durée pour cet item", oldDuration);

		if (newDuration != null) {
			newDuration = parseInt(newDuration, 10);
			if(newDuration >= 5) {
				oldDuration = parseInt(oldDuration, 10);
				addToDuration(newDuration - oldDuration, li.attr('data-type') != 'used');

				
				li.attr('data-duration', newDuration + '');
				li.find('.durationContainer').html(convertDurationToString(newDuration));
				name = li.find('input').attr('name');
				
				var regex = /^(usedResource|suggestedResource)_([0-9]+)_([0-9]+)$/;
				li.find('input').attr('name', name.replace(regex, '$1_$2_' + newDuration));
			}
			else {
				alert('Erreur : le temps doit être supérieur à 5 secondes');
			}
		}
	}
	
	function sortAllItems(selector) {
		$( selector ).each(function( index ) {
			input = $(this).find('input');
			if(input.attr('name') !== undefined) {
				input.val(index);
			}
		});
	}
	
	function deleteFromPlaylist(resId, type, duration) {
		if(type == 'used') {
			$('#addedRes_' + resId).remove();
			$('#usedRes_' + resId).removeClass('checkedRes');
			matrix.updateResourceStatus(resId, 'none');
			sortAllItems('#file_list li');
			
			if(duration == null)  {
				addToDuration(-parseInt($('#usedRes_' + resId).attr('data-duration'), 10));
			}
			else {
				addToDuration(-parseInt(duration, 10));
			}
		}
		else {
			$('#suggestedRes_' + resId).remove();
			$('#usedRes_' + resId).removeClass('suggestedRes');
			matrix.updateResourceStatus(resId, 'none');
			sortAllItems('#suggestion_list li');
			
			if(duration == null)  {
				addToDuration(-parseInt($('#suggestedRes_' + resId).attr('data-duration'), 10), true);
			}
			else {
				addToDuration(-parseInt(duration, 10), true);
			}
		}
	}
	
	function addToPlaylist(resId, title, type, duration) {
		if(type == 'used') {
			$('#usedRes_' + resId).addClass('checkedRes');
			matrix.updateResourceStatus(resId, 'checked');
			$('#file_list').append(generateNewItem(resId, title, 'used', duration));
			$('#rmRes_' + resId).click(function(event) 	 { event.stopImmediatePropagation(); deleteFromPlaylist($(this).attr('data-id'), 'used', $(this).closest('.playableResource').attr('data-duration')); });
			
			if(duration == null)  {
				addToDuration(parseInt($('#usedRes_' + resId).attr('data-duration'), 10));
			}
			else {
				addToDuration(parseInt(duration, 10));
			}
		}
		else {
			$('#usedRes_' + resId).addClass('suggestedRes');
			matrix.updateResourceStatus(resId, 'suggested');
			$('#suggestion_list').append(generateNewItem(resId, title, 'suggestion', duration));
			$('#rmRes_' + resId).click(function(event) 	 { event.stopImmediatePropagation(); deleteFromPlaylist($(this).attr('data-id'), 'suggestion', $(this).closest('.playableResource').attr('data-duration')); });
			
			if(duration == null)  {
				addToDuration(parseInt($('#suggestedRes_' + resId).attr('data-duration'), 10), true);
			}
			else {
				addToDuration(parseInt(duration, 10), true);
			}
		}
		$('.playableRes_' + resId).click(function() { triggerNewRes($(this).attr('data-id'));});
		$('.playableRes_' + resId).find('.editTimeButton').click(function(event) { event.stopImmediatePropagation(); event.preventDefault(); editTime(this); });
	}
	
	function generateNewItem(id, title, type, duration) {
		var resourceData = resourcesCollection[id];
		if(duration == null)  {
			duration = resourceData['duration'];
		}
		 
		var editTime = '';
		if(resourceData['type'] != 'video' && resourceData['type'] != 'audio') {
			editTime = '<a class="editTimeButton"><span class="glyphicon glyphicon-edit"></span></a> ';
		}
		
		if(type=='used') {
			return '<li class="list-group-item playableResource playableRes_' + id + '" id="addedRes_' + id + '" data-duration="' + duration + '" data-type="used" data-id="' + id + '"><div class="row"> \
				<div class="col-sm-7"><span class="glyphicon glyphicon-' + resourceData['glyphicon'] + '"></span> ' + title + '</div> \
				<div class="col-sm-3 text-right">' + editTime + '<span class="durationContainer">' + convertDurationToString(duration) + '</span></div> \
				<div class="col-sm-2 text-right"><a id="rmRes_' + id + '" data-type="used" data-id="' + id + '"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></div> \
				<input type="hidden" id="usedResource_' + id + '" name="usedResource_' + id + '_' + duration + '" value="' + $('#file_list li').length + '" />\
				</div></li>';
		}
		else {
			return '<li class="list-group-item playableResource playableRes_' + id + '" id="suggestedRes_' + id + '" data-duration="' + duration + '" data-type="suggestion" data-id="' + id + '"><div class="row"> \
				<div class="col-sm-7"><span class="glyphicon glyphicon-' + resourceData['glyphicon'] + '"></span> ' + title + '</div> \
				<div class="col-sm-3 text-right">' + editTime + '<span class="durationContainer">' + convertDurationToString(duration) + '</span></div> \
				<div class="col-sm-2 text-right"><a id="rmRes_' + id + '" data-type="suggestion" data-id="' + id + '"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></div> \
				<input type="hidden" id="suggestedResource_' + id + '" name="suggestedResource_' + id + '_' + duration + '" value="' + $('#suggestion_list li').length + '" />\
				</div></li>'
		}
	}
	
	
	matrix = new Matrix();
	
	$(function() {		
		{% for pov in matrix.povs %}
			{% for level in matrix.levels %}
				matrix.addBox({{ pov.id }}, {{ level.id }}, [
				{% if matrix.sortedResources[pov.id][level.id] is defined %}
					{% for usedRes in matrix.sortedResources[pov.id][level.id] %}
							new Resource({{ usedRes.id }}, {% if (display == 'normal') and presentation.isChecked(usedRes.id) %}1{% else %}0{% endif %}, {% if presentation.isSuggested(usedRes.id) %}1{% else %}0{% endif %}{% if display != 'normal' %}, {% if presentation.isChecked(usedRes.id) %}1{% else %}0{% endif %}{% endif %}),
					{% endfor %}
				{% endif %}
				]);
			{% endfor %}
		{% endfor %}
		
		bindPopover('.tileUsedResource');
		
		$('#file_list li').draggable({
			zIndex: 100000,
			revert: true,
			revertDuration: 0,
			connectToSortable: "#file_list"
		});

		$("#playlist-tab-toggle").droppable({
			accept: '#suggestion_list li',
			tolerance: 'touch',
			over: function (event, ui) {
				//workaround for bug http://bugs.jqueryui.com/ticket/6259
				ui.helper.removeData('overSortable');
			}, 
			drop: function (event, ui) {
				//workaround for bug http://bugs.jqueryui.com/ticket/6259
				if (ui.helper.data('overSortable') != null) {
					ui.helper.removeData('overSortable'); return;
				}
				addToPlaylist(ui.draggable.attr('data-id'), resourcesCollection[ui.draggable.attr('data-id')]['title'], 'used', ui.draggable.attr('data-duration'))
				deleteFromPlaylist(ui.draggable.attr('data-id'), 'suggestion', ui.draggable.attr('data-duration'));
				ui.draggable.remove();
			}
		});
		
		$("#suggestion-tab-toggle").droppable({
			accept: '#file_list li',
			tolerance: 'touch',
			over: function (event, ui) {
				//workaround for bug http://bugs.jqueryui.com/ticket/6259
				ui.helper.removeData('overSortable');
			}, 
			drop: function (event, ui) {
				//workaround for bug http://bugs.jqueryui.com/ticket/6259
				if (ui.helper.data('overSortable') != null) {
					ui.helper.removeData('overSortable'); return;
				}
				addToPlaylist(ui.draggable.attr('data-id'), resourcesCollection[ui.draggable.attr('data-id')]['title'], 'suggestion', ui.draggable.attr('data-duration'))
				deleteFromPlaylist(ui.draggable.attr('data-id'), 'used', ui.draggable.attr('data-duration'));
				ui.draggable.remove();
			}
		});
		
		$('[data-toggle="popover"]').popover({
			container:'body'
		});
		$('#file_list').sortable({
			out: function (event, ui) {
				//workaround for bug http://bugs.jqueryui.com/ticket/6259
				ui.helper.data('overSortable', true);
			}
		}).droppable({
			accept: '#none'
		});
		$( "#file_list" ).on( "sortupdate", function( event, ui ) { 
			sortAllItems('#file_list li');
		} );
		
		$( "#file_list" ).on( "sortupdate", function( event, ui ) { 
			var input = ui.item.find('input');
			//input.attr('name', input.attr('id'));
			
			
			$( "#file_list li" ).each(function( index ) {
				input = $(this).find('input');
				if(input.attr('name') !== undefined) {
					input.val(index);
				}
			});
		} );
		
		$('#suggestion_list').sortable().droppable({
			accept: '#none'
		});
		$( "#suggestion_list" ).on( "sortupdate", function( event, ui ) { 
			sortAllItems('#suggestion_list li');
		} );
		
		$( "#suggestion_list" ).on( "sortupdate", function( event, ui ) { 
			var input = ui.item.find('input');
			//input.attr('name', input.attr('id'));
			
			
			$( "#suggestion_list li" ).each(function( index ) {
				input = $(this).find('input');
				if(input.attr('name') !== undefined) {
					input.val(index);
				}
			});
		} );
		
		$('.rmRes').click(function() {
			deleteFromPlaylist($(this).attr('data-id'), $(this).attr('data-type'), $(this).closest('.playableResource').attr('data-duration'));
		});
	})
	
	$('.editTimeButton').click(function(event) { 
		event.stopImmediatePropagation(); 
		event.preventDefault(); 
		editTime(this); 
	});
	
	/** TODO: 
	 * - Submit on condition that form data has changed since page load
	 * - Validate form
	 */
	$('#save-btn').click(function() {
		if($('#file_list li').length > 0) {
			$('#presentation_form').submit();
		} else {
			alert('Aucun élément dans la liste de lecture');
		}
	});

	$('#delete_thumbs').click(function(event) {
		event.preventDefault();
		$('#keepThumbs').val(0);
		$('#presentation_form').submit();
	});
	
	
	{% if display != 'normal' %}
	$('#save_new_presentation').click(function(event) {
		event.preventDefault();
		if($('#file_list li').length > 0) {
			$('#presentation_form').submit();
		}
		else {
			alert('Aucun élément dans la liste de lecture');
		}
	});
	$('#submit_new_presentation').click(function(event) {
		event.preventDefault();
		if($('#file_list li').length > 0) {
			$('#presentation_form').attr("action", "{{ path("presentation_show", {'id': presentation.id}) }}");
			$('#presentation_form').submit();
		}
		else {
			alert('Aucun élément dans la liste de lecture');
		}
	});
	{% endif %}
	</script>
{% endblock %}
