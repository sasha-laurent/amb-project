<?php

namespace VMB\PresentationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PresentationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PresentationRepository extends EntityRepository
{
	public function getPresentations($page, $nbPerPage, $public=true, $official=true, $user = null)
	{
		$builder = $this->createQueryBuilder('p')
					  ->orderBy('p.dateUpdate', 'DESC');
					  
		if(is_bool($public)) {
			$builder->andWhere('p.public = :public')
			->setParameter('public', $public);
		}
		
		if(is_bool($official)) {
			$builder->andWhere('p.official = :official')
			->setParameter('official', $official);
		}
		
		if($user != null) {
			$builder->andWhere('p.owner = :user')->setParameter('user', $user);
		}

		$query = $builder->getQuery();
		$query->setFirstResult(($page-1) * $nbPerPage)
			  ->setMaxResults($nbPerPage);

		return new Paginator($query, true);
	}
	
	public function findWithSortedResources($id)
	{
		$qb = $this
			->createQueryBuilder('p')
			->leftJoin('p.resources', 'res')
			->addSelect('res')
			->orderBy('res.sort', 'ASC')
			->where('p.id = :id')
			->setParameter('id', $id)
		;

		return $qb
		->getQuery()
		->getSingleResult();
	}
	
	public function findWithConcreteResources($id)
	{
		$qb = $this
			->createQueryBuilder('p')
			->leftJoin('p.resources', 'checkedRes')
			->addSelect('checkedRes')
			->leftJoin('checkedRes.usedResource', 'usedRes')
			->addSelect('usedRes')
			->leftJoin('usedRes.resource', 'res')
			->addSelect('res')
			->orderBy('checkedRes.sort', 'ASC')
			->where('p.id = :id')
			->setParameter('id', $id)
		;

		return $qb
		->getQuery()
		->getSingleResult();
	}
}
