{% extends "::Backend/subPage.html.twig" %}
{% form_theme form 'bootstrap_3_horizontal_layout.html.twig' %}

{% block body %}

<div class="well">
	{{ form(form) }}
</div>

{% endblock %}


{% block script %}
	{{ parent() }}
	{# Script Nouvelle Matrix #}
	<script type="text/javascript">
	  $(document).ready(function() {
		indexes = new Array($("div#{{form.vars.name}}").find('div > .form-group > .col-sm-10 > div').length);
		
		$("form > div > .form-group > .col-sm-10 > div").each(function(pos) {
			if($(this).attr('data-prototype')) {
				var $container = $(this);
				var newContent = $container.html().replace(/col-sm-2/g, 'col-sm-1');
				$container.html(newContent);

				// On ajoute un lien pour ajouter une nouvelle catégorie
				var $addLink = $('<a href="#" id="add_category" class="btn btn-default"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></a>');
				$container.prepend($addLink);

				// On définit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
				indexes[pos] = $container.find(':input').length;

				// On ajoute un nouveau champ à chaque clic sur le lien d'ajout.
				$addLink.click(function(e) {
				  addCategory($container,  pos);
				  e.preventDefault(); // évite qu'un # apparaisse dans l'URL
				  return false;
				});

				// On ajoute un premier champ automatiquement s'il n'en existe pas déjà un (cas d'une nouvelle annonce par exemple).
				if (indexes[pos] == 0) {
				  addCategory($container, pos);
				} else {
				  // Pour chaque catégorie déjà existante, on ajoute un lien de suppression
				  $container.children('div').each(function() {
					addDeleteLink($(this), $container, false);
				  });
				}
				
				reattributePositions($container);
			}
		});
		
		function reattributePositions($container) {
			var i = 0;
			$('> .form-group', $container).each(function() {
				$('> label', this).html("#" + (i+1));
				i++;
			});
		}

		// La fonction qui ajoute un formulaire Categorie
		function addCategory($container, indexPos) {
		  // Dans le contenu de l'attribut « data-prototype », on remplace :
		  // - le texte "__name__label__" qu'il contient par le label du champ
		  // - le texte "__name__" qu'il contient par le numéro du champ
		  var $prototype = $($container.attr('data-prototype').replace(/__name__label__/g, '#' + (indexes[indexPos]+1))
			  .replace(/__name__/g, indexes[indexPos]).replace(/col-sm-2/g, 'col-sm-1'));

		  // On ajoute au prototype un lien pour pouvoir supprimer la catégorie
		  addDeleteLink($prototype, $container, false);

		  // On ajoute le prototype modifié à la fin de la balise <div>
		  $container.append($prototype);
		  reattributePositions($container);

		  // Enfin, on incrémente le compteur pour que le prochain ajout se fasse avec un autre numéro
		  indexes[indexPos]++;
		}

		// La fonction qui ajoute un lien de suppression d'une catégorie
		function addDeleteLink($prototype, $container, instantDelete) {
			if(instantDelete)
			{
				// Création du lien
				$deleteLink = $('<div class="col-sm-1"><a href="#" title="{{ "actions.delete"|trans|desc('Delete') }}" class="btn btn-danger"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></div>');

				// Ajout du lien
				$prototype.append($deleteLink);

				// Ajout du listener sur le clic du lien
				$deleteLink.click(function(e) {
					$prototype.remove();
					e.preventDefault(); // évite qu'un # apparaisse dans l'URL
					reattributePositions($container);
					return false;
				});
			}
			else
			{
				// Création du lien
				$deleteLink = $('<div class="col-sm-1"><a href="#" class="btn btn-danger"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></div>');

				// Ajout du lien
				$prototype.append($deleteLink);

				// Ajout du listener sur le clic du lien
				$deleteLink.click(function(e) {
					flag = $(this).closest('form').attr('data-flag');
					if(flag != "0" && flag != "1") {
						flag = "0";
					}
					
					if(flag == "0") {
						if(confirm("Etes-vous sur ? Cette action supprimera définitivement cette ligne de la matrice.")) {
							$(this).closest('form').attr('data-flag', "1");
							var item = this;
							$.ajax({
								type: "POST",
								url: '{{ path('matrix_delete_row') }}',
								data: { 
									fieldId: $(this).closest('.form-group').find('.col-sm-10 div').attr('id'), 
									postAction: $(this).closest('form').attr('action') 
								},
								cache: false,
								success: function(data){
									if(data == 'ok') {
										formContainer = $('> div', $(item).closest('.form-group').closest('.col-sm-10'));
										$(item).closest('.form-group').remove();
										reattributePositions(formContainer);
										location.reload();
									}
									else {
										alert('Une erreur est survenue');
									}
									$(item).closest('form').attr('data-flag', "0");
								}
							});
							e.preventDefault(); // évite qu'un # apparaisse dans l'URL
							return false;
						}
					}
					else {
						alert('Action déjà en cours');
					}
				});
			}
		}
	  });

	{# Script pour un ajout optionnel d'un fichier d'art sur une ressource audio #}
	$(document).ready(function(){
		// hide optional thumbnail input
		var thumbnail_form = $("#vmb_resourcebundle_resource_customAudioArt").parentsUntil("#vmb_resourcebundle_resource")[1];
		$(thumbnail_form).hide();
		// when a file has been selected, parse extension, if it corresponds to an audio file then reveal audio art upload 
		$("#vmb_resourcebundle_resource_file").change(function(){
			var selected_file = $(this)[0].files[0];
			if(selected_file != null) // don't exclude this possibility
			{
				var typ = selected_file.type.split('/');
				if(typ[0] == 'audio' && (typ[1] == 'ogg' || typ[1] == 'mp3'))
				{
					$(thumbnail_form).show();
				}
			}
		});
		
	});
	</script>
{% endblock %}
